import React, { Component, ReactNode, ErrorInfo } from 'react'

interface ErrorBoundaryProps {
  children: ReactNode
}

interface ErrorBoundaryState {
  hasError: boolean
}

class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError(): ErrorBoundaryState {
    return { hasError: true }
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Error caught in ErrorBoundary:', error, errorInfo)
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="max-w-[600px] m-auto">
          <h1 className="text-primary">—á—Ç–æ-—Ç–æ —Ç—É—Ç –Ω–µ —Ç–∞–∫!</h1>
          <p>–æ –±–æ–∂–µ, —ç—Ç–æ –æ—à–∏–±–∫–∞!</p>
          <p>–º—ã —É–∂–µ –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø—Ä–æ–±–ª–µ–º–æ–π üëÄ</p>
          <p>
            –ø–æ–∫–∞ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞{' '}
            <a
              href="/"
              className="underline underline-offset-2 hover:text-primary">
              –≥–ª–∞–≤–Ω—É—é
            </a>
          </p>
        </div>
      )
    }

    return this.props.children
  }
}

export default ErrorBoundary
